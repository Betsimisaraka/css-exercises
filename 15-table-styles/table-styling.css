/*
/*table-layout
  Table-layout property controls the position of the table with rows, colums, cells.
*/
table-layout {
  table-layout: auto;
  width: 100%;
}
/*border-spacing
  Border-spacing property spacifies the distance between the two border nearby.
*/
border-spacing {
  border-spacing: 2px;
}
/*border-collapse
  Border-collapse specifies the decoration of the border whether it is collapse or separated.
*/
border-collapse {
  border-collapse: separate;
}
/*caption-side
   Caption-side property specifies the position of the table caption.
*/
caption-side {
  caption-side: top, bottom;
}
/*empty-cells
   Empty-cells property sets whether the border or the background of the empty celles shown or hide.
*/
empty-cells {
  empty-cells: show, hide;
}

HTML elements these values correspond to
table <table>
table-row-group <tbody>
table-header-group <thead>
table-footer-group <tfoot>
table-row <tr>
table-cell <td>, <th>
table-column-group <colgroup>
table-column <col>
table-caption <caption>

Border-spacing required border-collapse:separated declaration before it can work effectively.

The downsides of using the various `table*` values for `display` on a set of elements are, thereby simulating a table layout on non-table elements
It needs a lot of lay out, difficult that means it takes long time to render or to download.
If you want tabular relationship you can't use css.
If you have tabular it is better to use html.

table-layout: fixed means the width of the table will be the same, but for the table-layout: auto: it depents on how big is the content inside of the table cell make the width small or big.

Can you use border-spacing and other table-like properties on non-table elements
Yes we can but we have to set display:table.

-empty-cells requires border-collapse:separated declaration before it can work effectively
